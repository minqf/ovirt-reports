<?xml version="1.0" encoding="UTF-8"?>
<inputControl exportedWithPermissions="true">
    <folder>/reports_resources/JDBC/Input_Controls/Period_Affected/single_select/datacenter_ic/all_dcs_with_vms</folder>
    <name>P_DataCenter_ID</name>
    <version>4</version>
    <label>$R{ic.dc}</label>
    <creationDate>2014-02-13T15:26:05.780+02:00</creationDate>
    <updateDate>2014-02-17T13:05:11.696+02:00</updateDate>
    <type>4</type>
    <mandatory>true</mandatory>
    <readOnly>false</readOnly>
    <visible>true</visible>
    <query>
        <localResource
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            exportedWithPermissions="false" xsi:type="query">
            <folder>/reports_resources/JDBC/Input_Controls/Period_Affected/single_select/datacenter_ic/all_dcs_with_vms/P_DataCenter_ID_files</folder>
            <name>Data_Centers</name>
            <version>1</version>
            <label>Data_Centers</label>
            <creationDate>2014-02-17T13:05:11.696+02:00</creationDate>
            <updateDate>2014-02-17T13:05:11.696+02:00</updateDate>
            <language>sql</language>
            <queryString>--This will display in the select list only the data centers that have vms.
--The list can include deleted Data Centers, according to the value of the "is_deleted" parameter.
--The deleted Data Centers names will be concatenated along with their remove date.

SELECT DISTINCT
    cast ( datacenter_id as varchar ),
    delete_date,
    CASE
        WHEN delete_date IS NULL
            THEN datacenter_name
        ELSE
            datacenter_name
            ||
            ' ('
            ||
            loc_removed_on.removed_on
            ||
            ' '
            ||
            to_char(
                delete_date,
                $P{datetimelocalepattern}
            )
            ||
            ')'
    END as combo_name
FROM v4_0_configuration_history_datacenters
    LEFT OUTER JOIN (
        SELECT DISTINCT
            coalesce(
                enum_translator_localized.value_localized,
                enum_translator_default.value
            )
            as removed_on
        FROM enum_translator as enum_translator_default
            LEFT OUTER JOIN (
                SELECT
                    enum_type,
                    enum_key,
                    value as value_localized
                FROM enum_translator
                WHERE language_code = $P{userlocale}
            )  as enum_translator_localized
                ON (
                    enum_translator_localized.enum_type =
                    enum_translator_default.enum_type
                    AND enum_translator_localized.enum_key =
                    enum_translator_default.enum_key
                )
    WHERE enum_translator_default.language_code = 'en_US'
    AND enum_translator_default.enum_type = 'REPORTS_REMOVED_ON'
    ) as loc_removed_on
        ON (0=0)
WHERE datacenter_id in
    (
        SELECT DISTINCT datacenter_id
        FROM v4_0_configuration_history_clusters
        WHERE history_id in
            (
                SELECT max( a.history_id )
                FROM v4_0_configuration_history_clusters a
                GROUP BY a.cluster_id
            )
        AND create_date &lt;=
            CASE
                WHEN $P{P_Period} = 0
                    THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '1 day'
                WHEN $P{P_Period} = 1
                    THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '1 month'
                WHEN $P{P_Period} = 2
                    THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '3 month'
                WHEN $P{P_Period} = 3
                    THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '1 year'
            END
        AND
            (
                delete_date IS NULL
                OR
                delete_date &gt;= cast( $P{P_Start_Date} as TIMESTAMP )
            )
        /* "is_deleted" is a parameter that will pass a part of the query. */
        /* if the user chose not to view deleted entities then it will pass "AND delete_date IS NULL" else "NULL" */
        $P!{is_deleted}
        AND cluster_id in
            (
                SELECT DISTINCT cluster_id
                FROM v4_0_configuration_history_vms
                WHERE history_id in
                    (
                        SELECT max( a.history_id )
                        FROM v4_0_configuration_history_vms a
                        GROUP BY a.vm_id
                    )
                AND create_date &lt;=
                    CASE
                        WHEN $P{P_Period} = 0
                            THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '1 day'
                        WHEN $P{P_Period} = 1
                            THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '1 month'
                        WHEN $P{P_Period} = 2
                            THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '3 month'
                        WHEN $P{P_Period} = 3
                            THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '1 year'
                    END
                AND
                    (
                        delete_date IS NULL
                        OR
                        delete_date &gt;= cast( $P{P_Start_Date} as TIMESTAMP )
                    )
                $P!{is_deleted}
            )
    )
AND history_id in
    (
        SELECT max( a.history_id )
        FROM v4_0_configuration_history_datacenters a
        GROUP BY a.datacenter_id
    )
AND
    (
        delete_date IS NULL
        OR
        delete_date &gt;= cast( $P{P_Start_Date} as TIMESTAMP )
    )
    $P!{is_deleted}

UNION ALL

-- This sub-query is for the case that there are no data centers .
-- The user will see a "None Available" message in local language.
-- It is a replica of the sub-query above with the addition of "AND NOT EXISTS"

SELECT DISTINCT
    '00000000-0000-0000-0000-000000000000',
    cast( null as timestamp ),
    coalesce(
        enum_translator_localized.value_localized,
        enum_translator_default.value
    )
FROM enum_translator as enum_translator_default
    LEFT OUTER JOIN (
        SELECT
            enum_type,
            enum_key,
            value as value_localized
        FROM enum_translator
        WHERE language_code = $P{userlocale}
    )  as enum_translator_localized
        ON (
            enum_translator_localized.enum_type =
            enum_translator_default.enum_type
            AND enum_translator_localized.enum_key =
            enum_translator_default.enum_key
        )
WHERE language_code = 'en_US'
AND enum_translator_default.enum_type = 'REPORTS_NONE_AVAILABLE'
AND NOT EXISTS
    (
        SELECT 1
        FROM v4_0_configuration_history_datacenters
        WHERE datacenter_id in
            (
                SELECT DISTINCT datacenter_id
                FROM v4_0_configuration_history_clusters
                WHERE history_id in
                    (
                        SELECT max( a.history_id )
                        FROM v4_0_configuration_history_clusters a
                        GROUP BY a.cluster_id
                    )
                AND create_date &lt;=
                    CASE
                        WHEN $P{P_Period} = 0
                            THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '1 day'
                        WHEN $P{P_Period} = 1
                            THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '1 month'
                        WHEN $P{P_Period} = 2
                            THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '3 month'
                        WHEN $P{P_Period} = 3
                            THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '1 year'
                    END
                AND
                    (
                        delete_date IS NULL
                        OR
                        delete_date &gt;= cast( $P{P_Start_Date} as TIMESTAMP )
                    )
                    $P!{is_deleted}
                AND cluster_id in
                    (
                        SELECT DISTINCT cluster_id
                        FROM v4_0_configuration_history_vms
                        WHERE history_id in
                            (
                                SELECT max( a.history_id )
                                FROM v4_0_configuration_history_vms a
                                GROUP BY a.vm_id
                            )
                        AND create_date &lt;=
                            CASE
                                WHEN $P{P_Period} = 0
                                    THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '1 day'
                                WHEN $P{P_Period} = 1
                                    THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '1 month'
                                WHEN $P{P_Period} = 2
                                    THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '3 month'
                                WHEN $P{P_Period} = 3
                                    THEN cast( $P{P_Start_Date} as TIMESTAMP ) + interval '1 year'
                            END
                        AND
                            (
                                delete_date IS NULL
                                OR delete_date &gt;= cast( $P{P_Start_Date} as TIMESTAMP )
                            )
                            $P!{is_deleted}
                    )
            )
        AND history_id in
            (
                SELECT max( a.history_id )
                FROM v4_0_configuration_history_datacenters a
                GROUP BY a.datacenter_id
            )
        AND
            (
                delete_date IS NULL
                OR
                delete_date &gt;= cast( $P{P_Start_Date} as TIMESTAMP )
            )
            $P!{is_deleted}
    )
ORDER BY delete_date DESC, combo_name
</queryString>
            <dataSource>
                <uri>/reports_resources/JDBC/data_sources/ovirt</uri>
            </dataSource>
        </localResource>
    </query>
    <queryVisibleColumn>combo_name</queryVisibleColumn>
    <queryValueColumn>datacenter_id</queryValueColumn>
</inputControl>
